{"mappings":"YAAA,aAEA,IAAMA,EAAaC,SAASC,cAAc,UACpCC,EAAOF,SAASC,cAAc,gBAC9BE,EAASH,SAASC,cAAc,WAChCG,EAAYJ,SAASC,cAAc,mBAGrCI,GAFSL,SAASC,cAAc,SAEnB,GACbK,EAAiB,EACjBC,EAAc,EAWlB,SAASC,EAAcC,EAAUC,GAC/B,IAAMC,EAAgBC,KAAKC,SAAW,GAEtC,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3BC,YAAW,WACLN,EACFI,EAAQ,6CAERC,EAAO,yC,GAERN,E,IA4BPN,EAAUc,iBAAiB,SA/C3B,SAAuBC,GACrBA,EAAEC,iBAEFf,EAAagB,SAAStB,EAAWuB,OACjChB,EAAiBe,SAASnB,EAAKoB,OAC/Bf,EAAcc,SAASlB,EAAOmB,OAkBhC,WAGE,IAFA,IAAMC,EAAa,GAEVC,EAAI,EAAGA,GAAKjB,EAAaiB,IAAK,CACrC,IAAMC,EAAepB,GAAcmB,EAAI,GAAKlB,EAC5CiB,EAAWG,KAAK,CACdC,QAASnB,EAAc,kBAAoBoB,OAAFJ,GAAKC,GAC9Cf,MAAOe,G,CAIXX,QAAQe,WAAWN,EAAWO,KAAI,SAAAC,G,OAAKA,EAAEJ,O,KAAUK,MAAK,SAAAC,GACtDA,EAAQC,SAAQ,SAACC,EAAQC,GACD,cAAlBD,EAAOE,OACTC,QAAQC,IACN,uBAAyCX,OAAhBQ,EAAQ,EAAE,QAA8BR,OAAxBL,EAAWa,GAAO1B,MAAM,OAGnE4B,QAAQC,IAAI,sBAAgCX,OAAVQ,EAAQ,G,OAnChDI,E","sources":["src/js/03-promises.js"],"sourcesContent":["'use strict';\n\nconst delayInput = document.querySelector('.delay');\nconst step = document.querySelector('.delay--step');\nconst amount = document.querySelector('.amount');\nconst submitBtn = document.querySelector('.button--submit');\nconst form = document.querySelector('.form');\n\nlet delayValue = 0;\nlet delayStepValue = 0;\nlet amountValue = 0;\n\nfunction valueFromUser(e) {\n  e.preventDefault();\n\n  delayValue = parseInt(delayInput.value);\n  delayStepValue = parseInt(step.value);\n  amountValue = parseInt(amount.value);\n  createPromises();\n}\n\nfunction createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;\n\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve('Success! Value passed to resolve function');\n      } else {\n        reject('Error! Error passed to reject function');\n      }\n    }, delay);\n  });\n}\n\nfunction createPromises() {\n  const promiseArr = [];\n\n  for (let i = 1; i <= amountValue; i++) {\n    const promiseDelay = delayValue + (i - 1) * delayStepValue;\n    promiseArr.push({\n      promise: createPromise(`Promise number ${i}`, promiseDelay),\n      delay: promiseDelay,\n    });\n  }\n\n  Promise.allSettled(promiseArr.map(p => p.promise)).then(results => {\n    results.forEach((result, index) => {\n      if (result.status === 'fulfilled') {\n        console.log(\n          `✅ Fulfilled promise ${index + 1} in ${promiseArr[index].delay}ms`\n        );\n      } else {\n        console.log(`❌ Rejected promise ${index + 1}`);\n      }\n    });\n  });\n}\n\nsubmitBtn.addEventListener('click', valueFromUser);\n"],"names":["$ce04d3a99e08e73b$var$delayInput","document","querySelector","$ce04d3a99e08e73b$var$step","$ce04d3a99e08e73b$var$amount","$ce04d3a99e08e73b$var$submitBtn","$ce04d3a99e08e73b$var$delayValue","$ce04d3a99e08e73b$var$delayStepValue","$ce04d3a99e08e73b$var$amountValue","$ce04d3a99e08e73b$var$createPromise","position","delay","shouldResolve","Math","random","Promise","resolve","reject","setTimeout","addEventListener","e","preventDefault","parseInt","value","promiseArr","i","promiseDelay","push","promise","concat","allSettled","map","p","then","results","forEach","result","index","status","console","log","$ce04d3a99e08e73b$var$createPromises"],"version":3,"file":"03-promises.b40bdeed.js.map"}